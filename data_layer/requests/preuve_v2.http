### Authenticate as a user
POST {{api}}/auth/v1/token?grant_type=password
apikey: {{anon}}
Content-Type: application/json

{
  "email": "{{yolo_mail}}",
  "password": "{{yolo_pass}}"
}


> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.log('token is ' + response.body['access_token']);
    client.global.set("auth_token", response.body['access_token']);
%}

### # Supabase API
### Create a bucket as service user.
POST {{api}}/storage/v1/bucket
apikey: {{service}}
Authorization: Bearer {{service}}
Content-Type: application/json

{
  "id": "1",
  "name": "preuves de la collectivité x",
  "public": true
}

### List files using supabase API (does not work well with files with slashes)
POST {{api}}/storage/v1/object/list/{{bucket_id}}
apikey: {{anon}}
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "prefix": "",
  "limit": 100,
  "offset": 0,
  "sortBy": {
    "column": "name",
    "order": "asc"
  }
}

### # A. Upload scenario
### A. Retrieve bucket id for collectivite 1
GET {{api}}/rest/v1/collectivite_bucket?collectivite_id=eq.1
apikey: {{anon}}
Authorization: Bearer {{auth_token}}

> {%
    client.test("List executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    // Save bucket id to use it later.
    client.global.set("bucket_id", response.body[0]['bucket_id']);
%}

### A. Can I write on a bucket ?
POST {{api}}/rest/v1/rpc/is_bucket_writer
apikey: {{anon}}
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{ "id": "{{bucket_id}}" }

> {%
    client.test("Read executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body === true, "Response body is not true");
    });
%}

### A. Upload a file
POST {{api}}/storage/v1/object/{{bucket_id}}/c9df071601f3f72b5430a55cd7ea584be5c2a36bb4226b621c4dca50088ef8b9
apikey: {{anon}}
Authorization: Bearer {{auth_token}}
x-upsert: true
cacheControl: 3600
Content-Type: multipart/form-data; boundary=boundary

--boundary
Content-Disposition: form-data; name="c9df071601f3f72b5430a55cd7ea584be5c2a36bb4226b621c4dca50088ef8b9"; filename="c9df071601f3f72b5430a55cd7ea584be5c2a36bb4226b621c4dca50088ef8b9"

< ./preuve_input.txt
--boundary--

> {%
    client.test("Upload executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### A. Download a file
GET {{api}}/storage/v1/object/{{bucket_id}}/c9df071601f3f72b5430a55cd7ea584be5c2a36bb4226b621c4dca50088ef8b9
apikey: {{service}}
Authorization: Bearer {{service}}

### A. Upsert a preuve
POST {{api}}/rest/v1/rpc/add_bibliotheque_fichier
apikey: {{anon}}
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "collectivite_id": 1,
  "hash": "c9df071601f3f72b5430a55cd7ea584be5c2a36bb4226b621c4dca50088ef8b9",
  "filename": "preuve_input.txt"
}

> {%
    client.test("Upsert executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}


### Les fichier de la bibliothèque de la collectivité
GET {{api}}/rest/v1/bibliotheque_fichier
apikey: {{anon}}
Authorization: Bearer {{auth_token}}


### Insert une preuve complementaire
POST {{api}}/rest/v1/preuve_complementaire
apikey: {{anon}}
Authorization: Bearer {{auth_token}}
Prefer: return=representation
Content-Type: application/json

{
  "collectivite_id": 1,
  "fichier_id": 1,
  "commentaire": "dodo",
  "action_id": "eci_1.1.3"
}


### Change le commentaire une preuve complementaire
PATCH {{api}}/rest/v1/preuve_complementaire?id=eq.1
apikey: {{anon}}
Authorization: Bearer {{auth_token}}
Prefer: return=representation
Content-Type: application/json

{
  "commentaire": "lala"
}

### Insert une preuve complementaire lien
POST {{api}}/rest/v1/preuve_complementaire
apikey: {{anon}}
Authorization: Bearer {{auth_token}}
Prefer: return=representation
Content-Type: application/json

{
  "collectivite_id": 1,
  "url": "http://yolo.dodo",
  "titre": "dodo",
  "action_id": "eci_1.1.3"
}

### Insert une preuve reglementaire lien
POST {{api}}/rest/v1/preuve_reglementaire
apikey: {{anon}}
Authorization: Bearer {{auth_token}}
Prefer: return=representation
Content-Type: application/json

{
  "collectivite_id": 1,
  "url": "http://yolo.dodo",
  "titre": "dodo",
  "preuve_id": "semaine_mobilite"
}

### List preuves of all types
GET {{api}}/rest/v1/preuve?collectivite_id=eq.1
apikey: {{anon}}
Authorization: Bearer {{auth_token}}

### Liste les preuves complementaire
GET {{api}}/rest/v1/preuve?collectivite_id=eq.1&preuve_type=eq.complementaire
apikey: {{anon}}
Authorization: Bearer {{auth_token}}

### Liste les preuves rapport
GET {{api}}/rest/v1/preuve?collectivite_id=eq.1&preuve_type=eq.rapport
apikey: {{anon}}
Authorization: Bearer {{auth_token}}

### Les définitions des preuves réglementaires
GET {{api}}/rest/v1/preuve_reglementaire_definition
apikey: {{anon}}
Authorization: Bearer {{auth_token}}
