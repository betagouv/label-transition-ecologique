### Get the swagger 2.0 json
GET {{api}}/rest/v1/
apikey: {{anon}}


### Authenticate as a user
POST {{api}}/auth/v1/token?grant_type=password
apikey: {{anon}}
Content-Type: application/json

{
  "email": "{{yolo_mail}}",
  "password": "{{yolo_pass}}"
}


> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.log('token is ' + response.body['access_token']);
    client.global.set("auth_token", response.body['access_token']);
%}

### Logout
POST {{api}}/auth/v1/logout
apikey: {{anon}}
Authorization: Bearer {{auth_token}}
Content-Type: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 204, "Response status is not 204");
    });
%}

### Create a new user
POST {{api}}/auth/v1/signup
apikey: {{anon}}
Authorization: Bearer {{anon}}
Content-Type: application/json

{
  "email": "yele@dede.com",
  "password": "yeledede"
}
### Is service role with anon key
POST {{api}}/rest/v1/rpc/is_service_role
apikey: {{anon}}
Authorization: Bearer {{anon}}
Content-Type: application/json


> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 204");
        client.assert(response.body === "false", "Response body is not false");
    });
%}


### Is service role with service key
POST {{api}}/rest/v1/rpc/is_service_role
apikey: {{service}}
Authorization: Bearer {{service}}
Content-Type: application/json


> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 204");
        client.assert(response.body === "true", "Response body is not true");
    });
%}


### Is service role with anon key
POST {{api}}/rest/v1/rpc/is_service_role
apikey: {{anon}}
Authorization: Bearer {{anon}}
Content-Type: application/json


> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 204");
        client.assert(response.body === "false", "Response body is not false");
    });
%}


### Is service role with service key
POST {{api}}/rest/v1/rpc/is_service_role
apikey: {{service}}
Authorization: Bearer {{service}}
Content-Type: application/json


> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 204");
        client.assert(response.body === "true", "Response body is not true");
    });
%}
