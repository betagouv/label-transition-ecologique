name: Test Business

on:
  push:
    branches-ignore:
      - main

jobs:

  check-black-format:
    runs-on: ubuntu-latest
    env:
      working-directory: ./business

    steps:
      - uses: actions/checkout@v2-beta
      - uses: actions/setup-python@v2
        with:
          path: ./business
          python-version: "3.9"
      - name: Black Code Formatter
        uses: psf/black@21.5b1

  test-business:
    runs-on: ubuntu-latest

    env:
      AUTH_DISABLED_DUMMY_USER: YES
      working-directory: ./business

    steps:
      # cf. https://github.com/actions/checkout
      - uses: actions/checkout@v2

      # Restore cache or create a new one for all dependencies installed with
      # Python.
      - name: Set up Python cache
        uses: actions/cache@v2
        env:
          python-tools-cache-name: python-tools-cache
        with:
          path: /opt/hostedtoolcache/Python
          key: ${{ runner.os }}-${{ env.python-tools-cache-name }}-${{ env.python-version }}
          restore-keys: |
            ${{ runner.os }}-${{ env.python-tools-cache-name }}
            ${{ runner.os }}-

      # Check black formatting :( Does not work. Any clue ?
      # - name: Black checking 
      #   run: |
      #     pipenv run black --check . 
      #   working-directory: ${{env.working-directory}}

      # Restore cache or create a new one for all dependencies installed with
      # Pipenv
      - name: Set up Pipenv cache
        uses: actions/cache@v2
        env:
          pipenv-cache-name: pipenv-cache
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-${{ env.pipenv-cache-name }}-${{ hashFiles('Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.pipenv-cache-name }}
            ${{ runner.os }}-

      # cf. https://github.com/actions/setup-python
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.1'

      # Install the dependencies manager.
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel
        working-directory: ${{env.working-directory}}

      # Install the project's dependencies.
      - name: Install dependencies
        run: |
          pipenv install
          pipenv install --dev
        working-directory: ${{env.working-directory}}

      # Run tests
      - name: Run tests
        run: pipenv run pytest tests
        working-directory: ${{env.working-directory}}
