name: Deploy LTE client

on:
  push:
    # TODO: change to main when automated deployment can be used
    branches: [add_deploy_workflow]

jobs:
  # This job install codegen dependencies
  codegen-setup:
    runs-on: ubuntu-latest
    env:
      working-directory: ./codegen

    steps:
      - uses: actions/checkout@v2

      - name: Setup pip cache
        uses: actions/cache@v2
        env:
          pip-cache-name: pip-cache
        with:
          path: /opt/hostedtoolcache/Python
          key: ${{ runner.os }}-${{ env.pip-cache-name }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.pip-cache-name }}
            ${{ runner.os }}-

      - name: Setup poetry cache
        uses: actions/cache@v2
        env:
          poetry-cache-name: poetry-cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-${{ env.poetry-cache-name }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.poetry-cache-name }}-
            ${{ runner.os }}-

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.1'

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip --no-cache-dir install poetry

      - name: Install dependencies
        run: |
          which poetry
          poetry install
        working-directory: ${{env.working-directory}}

  # This job runs Python tests in codegen directory
  codegen-test:
    runs-on: ubuntu-latest
    needs: codegen-setup
    env:
      working-directory: ./codegen

    steps:
      - name: Setup pip cache
        uses: actions/cache@v2
        env:
          pip-cache-name: pip-cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ env.pip-cache-name }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.pip-cache-name }}
            ${{ runner.os }}-

      - name: Setup poetry cache
        uses: actions/cache@v2
        env:
          poetry-cache-name: poetry-cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-${{ env.poetry-cache-name }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.poetry-cache-name }}-
            ${{ runner.os }}-

      - name: Run tests
        run: poetry run pytest
        working-directory: ${{env.working-directory}}

  # This job generated files with codegen, files that are mandatory for the
  # client application.
  codegen-generate:
    runs-on: ubuntu-latest
    needs: codegen-test
    env:
      working-directory: ./codegen

    steps:
      - name: Setup Python cached dependencies
        uses: actions/cache@v2
        env:
          cache-name: poetry-cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Generate shared models and data in JavaScript
        run: echo 'toto'





