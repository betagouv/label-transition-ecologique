name: Deploy LTE client

on:
  push:
    # TODO: change to main when automated deployment can be used
    branches: [add_deploy_workflow]

jobs:
  # This job runs tests in codegen and generated files that are needed by the
  # client application.
  codegen-test-and-generate:
    runs-on: ubuntu-latest
    env:
      python-version: 3.9.1
      working-directory: ./codegen

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python cache
        uses: actions/cache@v2
        env:
          python-tools-cache-name: python-tools-cache
        with:
          path: /opt/hostedtoolcache/Python
          key: ${{ runner.os }}-${{ env.python-tools-cache-name }}-${{ env.python-version }}
          restore-keys: |
            ${{ runner.os }}-${{ env.python-tools-cache-name }}
            ${{ runner.os }}-

      - name: Set up poetry binary cache
        uses: actions/cache@v2
        env:
          poetry-bin-cache-name: poetry-bin
        with:
          path: ~/poetry
          key: ${{ runner.os }}-${{ env.poetry-bin-cache-name }}-${{ hashFiles('codegen/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.poetry-bin-cache-name }}
            ${{ runner.os }}-

      - name: Set up dependencies cache
        uses: actions/cache@v2
        env:
          poetry-cache-name: poetry-dependencies-cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-${{ env.poetry-cache-name }}-${{ hashFiles('codegen/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.poetry-cache-name }}-
            ${{ runner.os }}-

      - name: Set up Python 3.9.1
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.1'

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install Poetry
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | POETRY_HOME=~/poetry python -
          echo "$HOME/poetry/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install
        working-directory: ${{env.working-directory}}

      # - name: Run tests
        # run: poetry run pytest
        # working-directory: ${{env.working-directory}}

      - name: Generate shared models and data in JavaScript
        run: |
          mkdir ~/tmp
          mkdir ~/tmp/client
          poetry run generate all --actions-client-output-dir ~/tmp/client/generated/data --shared-client-output-dir ~/tmp/client/generated/models --thematique-client-output-dir ~/tmp/client/generated/data
        working-directory: ${{env.working-directory}}

      - name: Upload generated files
        uses: actions/upload-artifact@v2
        with:
          name: generated-client-files
          path: ~/tmp/client

  # This job retrieves previously generated files and builds the client
  # application.
  client-build:
    runs-on: ubuntu-latest
    needs: codegen-test-and-generate
    env:
      working-directory: ./client_new

    steps:
      - uses: actions/checkout@v2

      - name: Download generated files
        uses: actions/download-artifact@v2
        with:
          name: generated-client-files
          path: client_new

      - name: Build client
        run: |
          npm install
          npm run build
          npm run export
        working-directory: ${{env.working-directory}}

      - name: Upload exported client app
        uses: actions/upload-artifact@v2
        with:
          name: client-app
          path: client_new/__sapper__/export

  # This job retrieves the exported client app and upload it to Scaleway.
  deploy-on-scaleway:
    runs-on: ubuntu-latest
    needs: client-build
    env:
      working-directory: ./tools

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python cache
        uses: actions/cache@v2
        env:
          python-tools-cache-name: python-tools-cache
        with:
          path: /opt/hostedtoolcache/Python
          key: ${{ runner.os }}-${{ env.python-tools-cache-name }}-${{ env.python-version }}
          restore-keys: |
            ${{ runner.os }}-${{ env.python-tools-cache-name }}
            ${{ runner.os }}-

      - name: Set up poetry binary cache
        uses: actions/cache@v2
        env:
          poetry-bin-cache-name: poetry-bin
        with:
          path: ~/poetry
          key: ${{ runner.os }}-${{ env.poetry-bin-cache-name }}-${{ hashFiles('codegen/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.poetry-bin-cache-name }}
            ${{ runner.os }}-

      - name: Set up dependencies cache
        uses: actions/cache@v2
        env:
          poetry-cache-name: poetry-dependencies-cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-${{ env.poetry-cache-name }}-${{ hashFiles('codegen/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.poetry-cache-name }}-
            ${{ runner.os }}-

      - name: Set up Python 3.9.1
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.1'

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install Poetry
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | POETRY_HOME=~/poetry python -
          echo "$HOME/poetry/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install
        working-directory: ${{env.working-directory}}

      - name: Download exported client app
        uses: actions/download-artifact@v2
        with:
          name: client-app
          path: ~/tmp/client

      - name: Deploy on Scaleway
        run: poetry run deploy -s entretiens
        working-directory: ${{env.working-directory}}

