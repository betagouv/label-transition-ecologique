name: Deploy LTE client

on:
  push:
    # TODO: change to main when automated deployment can be used
    branches: [add_deploy_workflow]

jobs:
  # This job install codegen dependencies
  codegen-setup:
    runs-on: ubuntu-latest
    env:
      python-version: 3.9.1
      working-directory: ./codegen

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python cache
        uses: actions/cache@v2
        env:
          python-tools-cache-name: python-tools-cache
        with:
          path: /opt/hostedtoolcache/Python
          key: ${{ runner.os }}-${{ env.python-tools-cache-name }}-${{ env.python-version }}
          restore-keys: |
            ${{ runner.os }}-${{ env.python-tools-cache-name }}
            ${{ runner.os }}-

      - name: Setup poetry binary cache
        uses: actions/cache@v2
        env:
          poetry-bin-cache-name: poetry-bin
        with:
          path: ~/poetry
          key: ${{ runner.os }}-${{ env.poetry-bin-cache-name }}-${{ hashFiles('codegen/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.poetry-bin-cache-name }}
            ${{ runner.os }}-

      - name: Setup dependencies cache
        uses: actions/cache@v2
        env:
          poetry-cache-name: poetry-dependencies-cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-${{ env.poetry-cache-name }}-${{ hashFiles('codegen/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.poetry-cache-name }}-
            ${{ runner.os }}-

      - name: Set up Python 3.9.1
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.1'

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install Poetry
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | POETRY_HOME=~/poetry python -
          echo "$HOME/poetry/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install
        working-directory: ${{env.working-directory}}

  # This job runs Python tests in codegen directory
  codegen-test:
    runs-on: ubuntu-latest
    needs: codegen-setup
    env:
      working-directory: ./codegen

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python cache
        uses: actions/cache@v2
        env:
          python-tools-cache-name: python-tools-cache
        with:
          path: /opt/hostedtoolcache/Python
          key: ${{ runner.os }}-${{ env.python-tools-cache-name }}-${{ env.python-version }}
          restore-keys: |
            ${{ runner.os }}-${{ env.python-tools-cache-name }}
            ${{ runner.os }}-

      - name: Setup poetry binary cache
        uses: actions/cache@v2
        env:
          poetry-bin-cache-name: poetry-bin
        with:
          path: ~/poetry
          key: ${{ runner.os }}-${{ env.poetry-bin-cache-name }}-${{ hashFiles('codegen/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.poetry-bin-cache-name }}
            ${{ runner.os }}-

      - name: Setup dependencies cache
        uses: actions/cache@v2
        env:
          poetry-cache-name: poetry-dependencies-cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-${{ env.poetry-cache-name }}-${{ hashFiles('codegen/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.poetry-cache-name }}-
            ${{ runner.os }}-

      - name: Setup Poetry
        run: |
          ls -la $HOME
          ls -la $HOME/poetry
          echo "$HOME/poetry/bin" >> $GITHUB_PATH

      - name: Run tests
        run: poetry run pytest
        working-directory: ${{env.working-directory}}

  # This job generated files with codegen, files that are mandatory for the
  # client application.
  # codegen-generate:
    # runs-on: ubuntu-latest
    # needs: codegen-test
    # env:
      # working-directory: ./codegen

    # steps:
      # - name: Setup pip cache
        # uses: actions/cache@v2
        # env:
          # pip-cache-name: pip-cache
        # with:
          # path: ~/.cache/pip
          # key: ${{ runner.os }}-${{ env.pip-cache-name }}-${{ hashFiles('codegen/poetry.lock') }}
          # restore-keys: |
            # ${{ runner.os }}-${{ env.pip-cache-name }}
            # ${{ runner.os }}-

      # - name: Setup poetry cache
        # uses: actions/cache@v2
        # env:
          # poetry-cache-name: poetry-cache
        # with:
          # path: ~/.cache/pypoetry
          # key: ${{ runner.os }}-${{ env.poetry-cache-name }}-${{ hashFiles('codegen/poetry.lock') }}
          # restore-keys: |
            # ${{ runner.os }}-${{ env.poetry-cache-name }}-
            # ${{ runner.os }}-

      # - name: Install Poetry
        # run: pip install poetry

      # - name: Generate shared models and data in JavaScript
        # run: poetry run generate all --client-root $mountDir/share/client

      # - name: Upload generated files
        # uses: actions/upload-artifact@v2
  # client-build:
    # runs-on: ubuntu-latest
    # needs: codegen-generate
    # env:
      # working-directory: ./client_new



