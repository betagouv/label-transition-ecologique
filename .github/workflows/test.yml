name: Test

on:
  pull_request:
    branches-ignore:
      - production
      - production-static
  push:

jobs:
  check:
    name: Check files
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check modified referentiels md files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
          
          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            echo $file
            if [[ $file != referentiels/* ]]; then
              echo "This modified file is not under the 'referentiels' folder."
              echo "::set-output name=run_job::false"
              break
            else
              echo "::set-output name=run_job::true"
            fi
          done < files.txt

  codegen-test-and-generate:
    name: Tests and artifacts on Codegen
    needs: check
    runs-on: ubuntu-latest
    env:
      python-version: 3.9.1
      working-directory: ./codegen

    steps:
      # cf. https://github.com/actions/checkout
      - uses: actions/checkout@v2

      # Restore cache or create a new one for all dependencies installed with
      # Python.
      - name: Set up Python cache
        uses: actions/cache@v2
        env:
          python-tools-cache-name: python-tools-cache
        with:
          path: /opt/hostedtoolcache/Python
          key: ${{ runner.os }}-${{ env.python-tools-cache-name }}-${{ env.python-version }}
          restore-keys: |
            ${{ runner.os }}-${{ env.python-tools-cache-name }}
            ${{ runner.os }}-

      # Restore cache or create a new one for the binary for Poetry, as Poetry
      # will check if it is already installed before installing itself.
      - name: Set up poetry binary cache
        uses: actions/cache@v2
        env:
          poetry-bin-cache-name: poetry-bin
        with:
          path: ~/poetry
          key: ${{ runner.os }}-${{ env.poetry-bin-cache-name }}-${{ hashFiles('codegen/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.poetry-bin-cache-name }}
            ${{ runner.os }}-

      # Restore cache or create a new one for all dependecies installed by
      # Poetry.
      - name: Set up dependencies cache
        uses: actions/cache@v2
        env:
          poetry-cache-name: poetry-dependencies-cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-${{ env.poetry-cache-name }}-${{ hashFiles('codegen/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.poetry-cache-name }}-
            ${{ runner.os }}-

      # cf. https://github.com/actions/setup-python
      - name: Set up Python 3.9.1
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.1'

      # Install the dependencies manager for codegen.
      - name: Install Poetry
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | POETRY_HOME=~/poetry python -
          echo "$HOME/poetry/bin" >> $GITHUB_PATH

      # Install the dependencies of codegen.
      - name: Install dependencies
        run: poetry install
        working-directory: ${{env.working-directory}}

      # Run all the tests for codegen.
      - name: Run tests
        if: needs.check.outputs.run_job == 'true'
        run: poetry run pytest
        working-directory: ${{env.working-directory}}

      # Generate all JavaScript shared models and data with codegen. These files
      # are mandatory for the client build.
      - name: Generate shared models and data in JavaScript
        run: |
          poetry run generate all
          pwd
        working-directory: ${{env.working-directory}}

      # Upload the generated files as an artefact so they can be download in the
      # client build job.
      - name: Upload generated files
        uses: actions/upload-artifact@v2
        with:
          name: generated-client-files
          path: ${{ github.workspace }}/app.territoiresentransitions.fr/src/generated

  client-unit-test:
    name: Unit tests on client
    runs-on: ubuntu-latest
    needs: codegen-test-and-generate
    env:
      working-directory:  ./app.territoiresentransitions.fr

    steps:
      # cf. https://github.com/actions/checkout
      - uses: actions/checkout@v2

      # Download JavaScript models and data generated previously by codegen.
      - name: Download generated files
        uses: actions/download-artifact@v2
        with:
          name: generated-client-files
          path: app.territoiresentransitions.fr/src/generated

      # Install dependencies
      - name: Install dependencies
        run: |
          npm install
        working-directory: ${{env.working-directory}}

      # Use Jest to run unit tests
      - name: Jest run
        run: |
          npm run test
        working-directory: ${{env.working-directory}}


#  end-to-end:
#    name: End-to-end tests on client
#    runs-on: ubuntu-latest
#    needs: codegen-test-and-generate
#    env:
#      working-directory:  ./app.territoiresentransitions.fr
#
#    steps:
#      # cf. https://github.com/actions/checkout
#      - uses: actions/checkout@v2
#
#      # Download JavaScript models and data generated previously by codegen.
#      - name: Download generated files
#        uses: actions/download-artifact@v2
#        with:
#          name: generated-client-files
#          path: generated
#
#      # Use Cypress to run end-to-end tests
#      - name: Cypress run
#        uses: cypress-io/github-action@v2
#        with:
#          build: npm run export
#          start: npx serve __sapper__/export -p 3000
#          working-directory: ${{env.working-directory}}
#