?start: statement

// statements produce effects
?statement: if_statement
     | expression

?if_statement: "si" expression "alors" statement -> if_then
      | "si" expression "alors" statement "sinon" statement -> if_then_else

// expressions produce values
?expression: logic_or

?logic_or: logic_and
    | logic_and "ou" logic_or -> logic_or

?logic_and: term
     | term "et" logic_and -> logic_and

?term: factor
    | factor "+" term   -> add
    | factor "-" term   -> sub

?factor: unary
    | unary "*" factor  -> mul
    | unary "/" factor  -> div

?unary: call

// embed functions in the langage
?call: primary
      | "identite" "(" identifier "," primary ")" -> identite
      | "reponse" "(" identifier "," primary ")" -> reponse_comparison
      | "reponse" "(" identifier ")" -> reponse_value
      | "min" "(" term "," term ")" -> min
      | "max" "(" term "," term ")" -> max


?primary:
      | "VRAI"             -> true
      | "FAUX"             -> false
      | "vrai"             -> true
      | "faux"             -> false
      | CNAME              -> string
      | number

arguments: expression [ "," expression]
identifier: CNAME -> identifier
number: SIGNED_NUMBER


%import common.WORD
%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.CNAME
%import common.WS

%ignore WS
